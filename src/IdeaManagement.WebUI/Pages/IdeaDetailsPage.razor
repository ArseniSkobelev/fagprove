@page "/idea/{Id}"

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
    <RadzenBreadCrumb>
        <Template Context="item">
            <IdeaBreadCrumbTemplate ItemContext="item" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Text="Ideas" />
            <RadzenBreadCrumbItem Path="/" Text="List" />
            <RadzenBreadCrumbItem Path="@($"/idea/{Id}")" Text="@(_idea == null ? "Idea title" : _idea.Title)" />
        </ChildContent>
    </RadzenBreadCrumb>
    
    @if (_idea == null || _votes == null || _authState == null)
    {
        <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" ShowValue="@false" />
        return;
    }

    <RadzenStack Orientation="Orientation.Horizontal" Gap=".5rem">
        <RadzenText TextStyle="TextStyle.H5" Style="margin: 0">@_idea.Title</RadzenText>
        @{
            var userId = _authState.User.Claims.FirstOrDefault(x => x.Type == "sub");

            if (userId != null && userId.Value == _idea.Author.Key)
            {
                <RadzenButton Click="@EditIdeaTitle" Icon="edit" Size="ButtonSize.ExtraSmall" />
            }
        }
    </RadzenStack>
    
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
        <RadzenButton Icon="@(_votes.FirstOrDefault(x => x == _idea.Id) != null ? "thumb_down" : "thumb_up")" Text="@(_votes.FirstOrDefault(x => x == _idea.Id) != null ? "Remove vote" : "Upvote")" Style="width: fit-content" Click="@(_votes.FirstOrDefault(x => x == _idea.Id) != null ? () => RemoveVote(_idea.Id) : () => UpvoteIdea(_idea.Id))" />
        @{
            var userId = _authState.User.Claims.FirstOrDefault(x => x.Type == "sub");

            if (userId != null && userId.Value == _idea.Author.Key)
            {
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteIdea())" Icon="delete" Text="Delete idea" />
            }
        }
    </RadzenStack>

    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical" Gap=".5rem">
            <RadzenText Style="margin: 0" TextStyle="TextStyle.Subtitle1">Idea details</RadzenText>
            
            <RadzenStack Orientation="Orientation.Horizontal" Gap=".5rem" AlignItems="AlignItems.Center">
                <RadzenText Style="margin: 0;" TextStyle="TextStyle.Subtitle1">Created at</RadzenText>
                <RadzenText Style="margin: 0;">@_idea.CreatedAt.ToString("dd.MM.yyyy HH:mm")</RadzenText>
            </RadzenStack>

            @if (_idea.UpdatedAt != _idea.CreatedAt)
            {
                <RadzenStack Orientation="Orientation.Horizontal" Gap=".5rem" AlignItems="AlignItems.Center">
                    <RadzenText Style="margin: 0;" TextStyle="TextStyle.Subtitle1">Last update</RadzenText>
                    <RadzenText Style="margin: 0;">@_idea.UpdatedAt.ToString("dd.MM.yyyy HH:mm")</RadzenText>
                </RadzenStack>
            }

            <RadzenStack Orientation="Orientation.Horizontal" Gap=".5rem" AlignItems="AlignItems.Center">
                <RadzenText Style="margin: 0;" TextStyle="TextStyle.Subtitle1">Author</RadzenText>
                <RadzenText Style="margin: 0;">@_idea.Author.Value</RadzenText>
            </RadzenStack>

            @if (_idea.LatestEditor != null)
            {
                <RadzenStack Orientation="Orientation.Horizontal" Gap=".5rem" AlignItems="AlignItems.Center">
                    <RadzenText Style="margin: 0;" TextStyle="TextStyle.Subtitle1">Last updated by</RadzenText>
                    <RadzenText Style="margin: 0;">@_idea.LatestEditor.Value</RadzenText>
                </RadzenStack>
            }

            <RadzenStack Orientation="Orientation.Horizontal" Gap=".5rem" AlignItems="AlignItems.Center">
                <RadzenStack Orientation="Orientation.Horizontal" Gap=".5rem">
                    <RadzenText Style="margin: 0;" TextStyle="TextStyle.Subtitle1">Idea status</RadzenText>
                    <RadzenText Style="margin: 0;">@_idea.Status</RadzenText>
                    @{
                        var userId = _authState.User.Claims.FirstOrDefault(x => x.Type == "sub");

                        if (userId != null && userId.Value == _idea.Author.Key || _authState.User.IsInRole(Roles.Administrator))
                        {
                            <RadzenButton Click="@EditIdeaStatus" Icon="edit" Size="ButtonSize.ExtraSmall" />
                        }
                    }
                </RadzenStack>
            </RadzenStack>
            
            <RadzenStack Orientation="Orientation.Horizontal" Gap=".5rem" AlignItems="AlignItems.Center">
                <RadzenText Style="margin: 0;" TextStyle="TextStyle.Subtitle1">Category</RadzenText>
                <RadzenText Style="margin: 0;">@_idea.Category</RadzenText>
                @{
                    var userId = _authState.User.Claims.FirstOrDefault(x => x.Type == "sub");

                    if (userId != null && userId.Value == _idea.Author.Key)
                    {
                        <RadzenButton Click="@EditIdeaCategory" Icon="edit" Size="ButtonSize.ExtraSmall" />
                    }
                }
            </RadzenStack>
        </RadzenStack>
    </RadzenCard>
    
    <RadzenStack class="flex-column flex-md-row" Gap="1rem">
        <RadzenCard class="w-100">
            <RadzenStack Gap=".5rem" Orientation="Orientation.Vertical">
                <RadzenStack Orientation="Orientation.Horizontal" Gap=".5rem">
                    <RadzenText Style="margin: 0" TextStyle="TextStyle.Subtitle1">Idea description</RadzenText>
                    @{
                        var userId = _authState.User.Claims.FirstOrDefault(x => x.Type == "sub");

                        if (userId != null && userId.Value == _idea.Author.Key)
                        {
                            <RadzenButton Click="@EditIdeaDescription" Icon="edit" Size="ButtonSize.ExtraSmall" />
                        }
                    }
                </RadzenStack>
                @if (string.IsNullOrWhiteSpace(_idea.Description))
                {
                    <RadzenText TextStyle="TextStyle.Body2">No idea description has been provided..</RadzenText>
                    return;
                }
                
                <RadzenText Style="margin: 0;">@_idea.Description</RadzenText>
            </RadzenStack>
        </RadzenCard>

        <RadzenCard class="w-100">
            <RadzenStack Gap=".5rem" Orientation="Orientation.Vertical">
                <RadzenText Style="margin: 0" TextStyle="TextStyle.Subtitle1">Upvotes</RadzenText>
                @_idea.Upvotes
            </RadzenStack>
        </RadzenCard>
    </RadzenStack>
    
        <RadzenCard class="w-100">
            <RadzenStack Gap=".5rem" Orientation="Orientation.Vertical">
                <RadzenText Style="margin: 0" TextStyle="TextStyle.Subtitle1">Communication</RadzenText>
            </RadzenStack>
        </RadzenCard>
</RadzenStack>

@code {
    [Parameter]
    public string? Id { get; set; }
    
    [Inject]
    public NotificationService NotificationService { get; set; } = default!;

    [Inject]
    public HttpClient HttpClient { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    public DialogService DialogService { get; set; } = default!;

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private DTOs.IdeaFull? _idea = null;
    private List<string>? _votes = null;
    private AuthenticationState? _authState = null;
    private string? _newIdeaTitle = null;
    private string? _newIdeaDescription = null;
    private List<Status>? _statuses = null;
    private string? _tempStatusTitle = null;
    private string? _ideaStatus = null;
    private string? _tempCategoryTitle = null;
    private string? _ideaCategory = null;
    private List<Category>? _categories = null;

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        
        if (string.IsNullOrWhiteSpace(Id))
        {
            NotificationService.Notify(NotificationSeverity.Error, "Invalid idea id has been provided. Please try again later");
            NavigationManager.NavigateTo("/");
            return;
        }

        await FetchIdeaDetails();
        await FetchStatuses();
        await FetchCategories();
    }

    private async Task FetchIdeaDetails()
    {
        try
        {
            _idea = await HttpClient.GetFromJsonAsync<DTOs.IdeaFull>($"Idea/qry_get_article_details/{Id}");

            _votes = await HttpClient.GetFromJsonAsync<List<string>>("Idea/qry_get_user_upvotes");

            if (_idea != null)
            {
                _newIdeaTitle = _idea.Title;
                _newIdeaDescription = _idea.Description;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to fetch idea details. Please try again later");
        }
    }

    private async Task FetchStatuses()
    {
        try
        {
            _statuses = await HttpClient.GetFromJsonAsync<List<Status>>("Status/qry_get_all_statuses");

            if (_statuses != null && _idea != null)
            {
                var ideaStatus = _statuses.FirstOrDefault(x => x.Title == _idea.Status);

                if (ideaStatus != null)
                {
                    _tempStatusTitle = ideaStatus.Title;
                    _ideaStatus = ideaStatus.Title;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to fetch status list. Please try again later");
        }
    }
    
    private async Task FetchCategories()
    {
        try
        {
            _categories = await HttpClient.GetFromJsonAsync<List<Category>>("Category/qry_get_all_categories");

            if (_categories != null && _idea != null)
            {
                var ideaCategory = _categories.FirstOrDefault(x => x.Title == _idea.Category);

                if (ideaCategory != null)
                {
                    _tempCategoryTitle = ideaCategory.Title;
                    _ideaCategory = ideaCategory.Title;
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to fetch status list. Please try again later");
        }
    }
    
    private async Task UpvoteIdea(string ideaId)
    {
        try
        {
            await HttpClient.PostAsync($"Idea/cmd_upvote_idea/{ideaId}", null);

            await FetchIdeaDetails();
            
            NotificationService.Notify(NotificationSeverity.Success, "Idea upvoted successfully");
        }
        catch (Exception e)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Unable to upvote idea");
            Console.WriteLine(e.Message);
        }
    }
    
    private async Task RemoveVote(string ideaId)
    {
        try
        {
            await HttpClient.PostAsync($"Idea/cmd_remove_vote/{ideaId}", null);

            await FetchIdeaDetails();
            
            NotificationService.Notify(NotificationSeverity.Success, "Vote removed successfully");
        }
        catch (Exception e)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Unable to remove vote from idea");
            Console.WriteLine(e.Message);
        }
    }

    private async Task DeleteIdea()
    {
        if (_idea == null)
            return;
        
        var confirmation = await DialogService.Confirm("Are you sure that you want to delete this idea?", "Idea deletion confirmation", options: new ConfirmOptions()
        {
            CloseDialogOnEsc = true,
            CloseDialogOnOverlayClick = true,
            CancelButtonText = "Cancel",
            OkButtonText = "Delete"
        });

        if (confirmation is null or false)
            return;

        try
        {
            await HttpClient.PostAsync($"Idea/cmd_delete_idea/{_idea.Id}", null);

            NotificationService.Notify(NotificationSeverity.Success, "Idea deleted successfully");
            
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to delete idea");
        }
    }

    private async Task EditIdeaTitle()
    {
        if (_idea == null)
            return;
        
        // show modal
        var result = await DialogService.OpenAsync("Edit title", ds =>
            @<RadzenStack Orientation="Orientation.Vertical">
                <RadzenTextBox Placeholder="Title" Value="@_newIdeaTitle" bind-Value="@_newIdeaTitle" @oninput="@((e) => _newIdeaTitle = e.Value.ToString())" />
                <RadzenStack Orientation="Orientation.Horizontal" Gap="16">
                    <RadzenButton Text="Save" Icon="save" Click="() => ds.Close(true)" />
                    <RadzenButton Text="Cancel" Icon="close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
        </RadzenStack>
        </RadzenStack>);
        
        if (result is not bool or false)
            return;

        if (_newIdeaTitle == _idea.Title || _newIdeaTitle == null)
            return;

        try
        {
            var cmd = new Commands.SingleStringUpdateCommand(_newIdeaTitle);
            
            await HttpClient.PostAsJsonAsync($"Idea/cmd_update_title/{_idea.Id}", cmd);

            await FetchIdeaDetails();
            
            NotificationService.Notify(NotificationSeverity.Success, "Idea title updated successfully");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to update idea title. Please try again later");
        }
    }
    
    private async Task EditIdeaDescription()
    {
        if (_idea == null)
            return;
        
        // show modal
        var result = await DialogService.OpenAsync("Edit description", ds =>
            @<RadzenStack Orientation="Orientation.Vertical">
                <RadzenTextArea Rows="5" Placeholder="Idea description" Value="@_newIdeaDescription" bind-Value="@_newIdeaDescription" @oninput="@((e) => _newIdeaDescription = e.Value.ToString())" />
                <RadzenStack Orientation="Orientation.Horizontal" Gap="16">
                    <RadzenButton Text="Save" Icon="save" Click="() => ds.Close(true)" />
                    <RadzenButton Text="Cancel" Icon="close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
        </RadzenStack>
        </RadzenStack>);
        
        if (result is not bool or false)
            return;

        if (_newIdeaDescription == _idea.Description || _newIdeaDescription == null)
            return;

        try
        {
            var cmd = new Commands.SingleStringUpdateCommand(_newIdeaDescription);
            
            await HttpClient.PostAsJsonAsync($"Idea/cmd_update_description/{_idea.Id}", cmd);

            await FetchIdeaDetails();
            
            NotificationService.Notify(NotificationSeverity.Success, "Idea description updated successfully");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to update idea description. Please try again later");
        }
    }

    private async Task EditIdeaStatus()
    {
        if (_idea == null || _statuses == null)
            return;
        
        // show modal
        var result = await DialogService.OpenAsync("Edit status", ds =>
            @<RadzenStack Orientation="Orientation.Vertical">
                <RadzenDropDown @bind-Value="@_tempStatusTitle" Data="@_statuses.Select(x => x.Title)" />
                <RadzenStack Orientation="Orientation.Horizontal" Gap="16">
                    <RadzenButton Text="Save" Icon="save" Click="() => ds.Close(true)"/>
                    <RadzenButton Text="Cancel" Icon="close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
        </RadzenStack>
        </RadzenStack>);
        
        if (result is not bool or false)
            return;

        if (_tempStatusTitle == _ideaStatus || _tempStatusTitle == null)
            return;

        try
        {
            var status = _statuses.FirstOrDefault(x => x.Title == _tempStatusTitle);

            if (status == null)
                return;
            
            var cmd = new Commands.UpdateIdeaStatusCommand(status.Id);
            
            await HttpClient.PostAsJsonAsync($"Idea/cmd_update_status/{_idea.Id}", cmd);

            await FetchIdeaDetails();
            
            NotificationService.Notify(NotificationSeverity.Success, "Status updated successfully");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to update status. Please try again later");
        }
    }
    
    private async Task EditIdeaCategory()
    {
        if (_idea == null || _categories == null)
            return;
        
        // show modal
        var result = await DialogService.OpenAsync("Edit category", ds =>
            @<RadzenStack Orientation="Orientation.Vertical">
                <RadzenDropDown @bind-Value="@_tempCategoryTitle" Data="@_categories.Select(x => x.Title)" />
                <RadzenStack Orientation="Orientation.Horizontal" Gap="16">
                    <RadzenButton Text="Save" Icon="save" Click="() => ds.Close(true)"/>
                    <RadzenButton Text="Cancel" Icon="close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
        </RadzenStack>
        </RadzenStack>);
        
        if (result is not bool or false)
            return;

        if (_tempCategoryTitle == _ideaCategory || _tempCategoryTitle == null)
            return;

        try
        {
            var category = _categories.FirstOrDefault(x => x.Title == _tempCategoryTitle);

            if (category == null)
                return;
            
            var cmd = new Commands.UpdateIdeaCategoryCommand(category.Id);
            
            await HttpClient.PostAsJsonAsync($"Idea/cmd_update_category/{_idea.Id}", cmd);

            await FetchIdeaDetails();
            
            NotificationService.Notify(NotificationSeverity.Success, "Category updated successfully");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to update category. Please try again later");
        }
    }
}