@page "/users"
@attribute [Authorize(Roles = $"{Roles.Administrator},{Roles.CategoryOwner},{Roles.IdeaContributor}")]
@inject NavigationManager NavigationManager

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
    <RadzenBreadCrumb>
        <Template Context="item">
            <IdeaBreadCrumbTemplate ItemContext="item" />
        </Template>
        <ChildContent>
            <RadzenBreadCrumbItem Text="User management" />
        </ChildContent>
    </RadzenBreadCrumb>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
        <RadzenText TextStyle="TextStyle.H5" Style="margin: 0">User management</RadzenText>
    </RadzenStack>

    <RadzenCard>
        <RadzenText>This page is used for managing application users.</RadzenText>
    </RadzenCard>
    
    @if (_users == null || _authState == null || _roles == null)
    {
        <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" ShowValue="@false" />
        return;
    }
    
    @if (!_users.Any())
    {
        <RadzenText TextStyle="TextStyle.Body2">No ideas have been found..</RadzenText>
        return;
    }

    <RadzenDataGrid FilterCaseSensitivity="@FilterCaseSensitivity.CaseInsensitive" TItem="@DTOs.ApplicationUser" Data="@_users" PageSize="10" AllowSorting AllowPaging AllowFiltering>
        <Columns>
            <RadzenDataGridColumn TItem="@DTOs.ApplicationUser" Property="Name" Title="User name (email or full name)">
                <Template>
                    @{
                        var userIdClaim = _authState.User.Claims.FirstOrDefault(x => x.Type == "sub");

                        if (userIdClaim == null)
                            return;

                        if (userIdClaim.Value == context.UserId)
                        {
                            @context.Name @(" (you)")
                        }
                        else
                        {
                            @context.Name
                        }
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="@DTOs.ApplicationUser" Property="Email" Title="Email">
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="@DTOs.ApplicationUser" Property="Role" Title="Role">
                <Template>
                    @RoleStringMapping.GetFriendlyRoleName(context.Role)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="@DTOs.ApplicationUser">
                <Template>
                    @{
                        var userIdClaim = _authState.User.Claims.FirstOrDefault(x => x.Type == "sub");

                        if (userIdClaim == null)
                            return;

                        <RadzenButton IsBusy="@_editingUser" Click="@(() => EditUser(context.Name, context.UserId, context.Role))" Disabled="@(userIdClaim.Value == context.UserId)" Style="width: 100%" Text="Edit" Icon="edit" />
                    }
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>

@code {
    [Inject] 
    public HttpClient HttpClient { get; set; } = default!;
    
    [Inject]
    public NotificationService NotificationService { get; set; } = default!;

    [Inject]
    public DialogService DialogService { get; set; } = default!;

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private List<DTOs.ApplicationUser>? _users = null;
    private AuthenticationState? _authState = null;
    private List<DTOs.ApplicationRole>? _roles = null;
    private string? _tempUserRole = null;
    private bool _editingUser = false;

    protected override async Task OnInitializedAsync()
    {
        await FetchUsers();
        await FetchRoles();

        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task FetchRoles()
    {
        try
        {
            _roles = await HttpClient.GetFromJsonAsync<List<DTOs.ApplicationRole>>("Auth0/qry_get_all_roles");
        }
        catch (Exception e)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Unable to fetch roles");
            Console.WriteLine(e.Message);
        }
    }
    
    private async Task FetchUsers()
    {
        try
        {
            _users = await HttpClient.GetFromJsonAsync<List<DTOs.ApplicationUser>>("Auth0/qry_get_application_users");
        }
        catch (Exception e)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Unable to fetch users");
            Console.WriteLine(e.Message);
        }
    }

    private async Task EditUser(string userHandle, string userId, string currUserRole)
    {
        if (_roles == null || _users == null)
            return;

        var currUser = _users.FirstOrDefault(x => x.UserId == userId);

        if (currUser == null)
            return;

        _tempUserRole = currUser.Role;

        _editingUser = true;
        
        var result = await DialogService.OpenAsync($"Edit user {userHandle}", ds =>
            @<RadzenStack Orientation="Orientation.Vertical">
                @if (currUser.Blocked)
                {
                    <RadzenButton Text="Unblock user" Click="@(async () => { ds.Close(); await UnblockUser(userId); })" Style="width: fit-content" Icon="block" ButtonStyle="ButtonStyle.Danger" />
                }
                else
                {
                    <RadzenButton Text="Block user" Click="@(async () => { ds.Close(); await BlockUser(userId); })" Style="width: fit-content" Icon="block" ButtonStyle="ButtonStyle.Danger" />
                }
                <RadzenStack Orientation="Orientation.Vertical" Gap=".25rem">
                    <RadzenText>User role</RadzenText>
                    <RadzenDropDown @bind-Value="@_tempUserRole" Data="@_roles.Select(x => x.Title)">
                        <Template>
                            @RoleStringMapping.GetFriendlyRoleName(context)
                        </Template>
                        <ValueTemplate>
                            @RoleStringMapping.GetFriendlyRoleName(context)
                        </ValueTemplate>
                    </RadzenDropDown>
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="16">
                    <RadzenButton Text="Save" Icon="save" Click="() => ds.Close(true)"/>
                    <RadzenButton Text="Cancel" Icon="close" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
        </RadzenStack>
        </RadzenStack>);

        if (result is not bool or false)
        {
            _editingUser = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(_tempUserRole))
        {
            _editingUser = false;
            return;
        }
        
        try
        {
            var newRole = _roles.FirstOrDefault(x => x.Title == _tempUserRole);
            
            var currRole = _roles.FirstOrDefault(x => x.Title == currUserRole);

            if (newRole == null || newRole.Id == currRole?.Id)
            {
                _editingUser = false;
                return;
            }
            
            var cmd = new Commands.SetUserRoleCommand(userId, newRole.Id, currRole?.Id);
            
            await HttpClient.PostAsJsonAsync("Auth0/cmd_set_user_role", cmd);

            await FetchUsers();
            
            NotificationService.Notify(NotificationSeverity.Success, "User role updated successfully");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to update user role. Please try again later");
        }

        _editingUser = false;
    }

    private async Task BlockUser(string userId)
    {
        try
        {
            var cmd = new Commands.BlockUserCommand(userId);
            
            await HttpClient.PostAsJsonAsync("Auth0/cmd_block_user", cmd);

            NotificationService.Notify(NotificationSeverity.Success, "User blocked successfully");
            
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to block user. Please try again later");
        }
    }
    
    private async Task UnblockUser(string userId)
    {
        try
        {
            var cmd = new Commands.UnblockUserCommand(userId);
            
            await HttpClient.PostAsJsonAsync("Auth0/cmd_unblock_user", cmd);

            NotificationService.Notify(NotificationSeverity.Success, "User unblocked successfully");
            
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, "Unable to unblock user. Please try again later");
        }
    }
}
