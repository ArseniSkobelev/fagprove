@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<RadzenStack Orientation="Orientation.Horizontal" Gap="16" AlignItems="AlignItems.Center">
    <AuthorizeView>
        <Authorized>
            <RadzenProfileMenu>
                <Template>
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                        @{
                            var imageClaim = context.User.Claims.FirstOrDefault(x => x.Type == "picture");

                            if (imageClaim != null)
                            {
                                <RadzenImage Path="@imageClaim.Value" AlternateText="Profile picture" Style="width: 2rem; height: 2rem; border-radius: 100%" />
                            }
                        }

                        <RadzenStack Orientation="Orientation.Vertical" Gap="0" Style="padding-right: 1rem">
                            @if (context.User.Identity != null)
                            {
                                <RadzenText Style="margin: 0; font-weight: 600;">@context.User.Identity.Name</RadzenText>

                                var roleClaim = context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role);

                                if (roleClaim != null)
                                {
                                    <RadzenText Style="margin: 0;" TextStyle="TextStyle.Body2">@RoleStringMapping.GetFriendlyRoleName(roleClaim.Value)</RadzenText>
                                }
                            }
                        </RadzenStack>
                    </RadzenStack>
                </Template>
                <ChildContent>
                    <RadzenStack class="rz-p-2" Gap=".5rem">
                        <RadzenButton Text="Sign out" Icon="logout" Click="@NavigateToSignOut" />
                    </RadzenStack>
                </ChildContent>
            </RadzenProfileMenu>
        </Authorized>
        <NotAuthorized>
            <RadzenStack class="rz-pr-2">
                <RadzenButton Click="@NavigateToLogin" Text="Log in" Icon="login" />
            </RadzenStack>
        </NotAuthorized>
    </AuthorizeView>
</RadzenStack>

@code{
    [Inject]
    public IAccessTokenProvider AccessTokenProvider { get; set; } = default!;

    [Inject]
    public NotificationService NotificationService { get; set; } = default!;

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("authentication/login");
    }

    private async Task NavigateToSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}